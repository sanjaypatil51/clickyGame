{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","onClick","clickImage","id","className","alt","name","src","image","Wrapper","children","Title","Header","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","message","console","log","score","topScore","App","state","character","totalScore","length","guessMessage","clickedMatch","filter","match","clicked","setState","i","sort","a","b","Math","random","this","map","charcater","key","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b9cfa751.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div onClick={() => props.clickImage(props.id)} className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />       \n      </div>\n\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n  <div className=\"title\">\n  <h1 >Clicky Game</h1>;\n  <h3>Click on an image to earn points, but don't click on any more than once!</h3>\n  </div>\n  )\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <a className=\"navbar-brand\" href=\"#\">Clicky Game</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <ul className=\"navbar-nav mx-auto\">\n                <li className=\"nav-item active\">\n                    <a className=\"nav-link\" href=\"#\">{props.message}</a>\n                    {console.log(props)}\n                </li>\n            </ul>\n            <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item active\">\n                    <a className=\"nav-link\" href=\"#\">Score: {props.score}| Top Score:{props.topScore}</a>\n                    {console.log(props)}\n                </li>\n            </ul>\n\n        </nav>\n    )\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Header from \"./components/Header\"\nimport character from \"./character.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    character,\n    score: 0,\n    totalScore: character.length,\n    topScore: 0,\n    guessMessage: \"Start Clicking\"\n\n  };\n\n  clickImage = id => {\n    // make copy of charcater array and get cliked imageand chek for cliked value\n\n    console.log(\"in click\")\n    const character = this.state.character;\n    let score = this.state.score\n    let topScore = this.state.topScore\n    let guessMessage = this.state.guessMessage\n\n    // Filter for the clicked match\n    const clickedMatch = character.filter(match => match.id === id);\n\n    // If the matched image's clicked value is already true, \n    // do the game over actions\n    if (clickedMatch[0].clicked) {\n\n      console.log(\"Correct Guesses: \" + this.setState.score);\n      console.log(\"Best Score: \" + this.state.topScore);\n\n      score = 0;\n      guessMessage = \"Bummer! You already clicked on this one.\"\n\n      for (let i = 0; i < character.length; i++) {\n        character[i].clicked = false;\n      }\n\n      this.setState({ score });\n      this.setState({ guessMessage });\n      this.setState({ character });\n\n      // Otherwise, if clicked = false, and the user hasn't finished\n    } else if (score < 10) {\n\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n\n      // increment the appropriate counter\n      score++;\n\n      guessMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n      if (score > topScore) {\n        topScore = score;\n        this.setState({ topScore });\n      }\n\n      // Shuffle the array to be rendered in a random order\n      character.sort(function (a, b) { return 0.5 - Math.random() });\n\n      // Set this.state.matches equal to the new matches array\n      this.setState({ character });\n      this.setState({ score });\n      this.setState({ guessMessage });\n    } else {\n\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n\n      // restart the guess counter\n      score = 0;\n\n      // Egg on the user to play again\n      guessMessage = \"WOW!!! You got ALL of them!!! Now, let's see if you can do it again!\";\n      topScore= 10;\n      this.setState({ topScore });\n\n      for (let i = 0; i < character.length; i++) {\n        character[i].clicked = false;\n      }\n\n      // Shuffle the array to be rendered in a random order\n      character.sort(function (a, b) { return 0.5 - Math.random() });\n\n      // Set this.state.matches equal to the new matches array\n      this.setState({character });\n      this.setState({ score });\n      this.setState({ guessMessage });\n\n    }\n\n\n  };\n\n  // Map over this.state.charcater and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore={this.state.topScore} message={this.state.guessMessage} />\n        <Wrapper>\n          <Title />\n          {this.state.character.map(charcater => (\n            <FriendCard\n              clickImage={this.clickImage}\n              id={charcater.id}\n              key={charcater.id}\n              name={charcater.name}\n              image={charcater.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}